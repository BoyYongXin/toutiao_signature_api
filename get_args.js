window = global;

var location = {
    protocol: "https:",
    href: "https://www.toutiao.comc/user/token/MS4wLjABAAAAPâ€¦pIWrgGdBDqkp-5om9Lans_kuIZ_ipAGRE/#mid=4377795668",
};
window.location = location;
var document = {
    cookie:"__tasessionId=igsx7icxu1584180712364; csrftoken=6888ab99f62d25a04afac27e12354111; tt_webid=6804004292803528206; s_v_web_id=verify_k7rgakzh_3uRJiojc_dRxN_49fo_A3NM_LAXiw2zyOoln"
};
window.document = document;

var navigator = {
    userAgent: "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.88 Safari/537.36",
};
window.navigator = navigator;

var md5 = function(e) {
    "use strict";

    function t(e, t) {
        var n = (65535 & e) + (65535 & t)
            , r = (e >> 16) + (t >> 16) + (n >> 16);
        return r << 16 | 65535 & n
    }

    function n(e, t) {
        return e << t | e >>> 32 - t
    }

    function r(e, r, o, i, u, a) {
        return t(n(t(t(r, e), t(i, a)), u), o)
    }

    function o(e, t, n, o, i, u, a) {
        return r(t & n | ~t & o, e, t, i, u, a)
    }

    function i(e, t, n, o, i, u, a) {
        return r(t & o | n & ~o, e, t, i, u, a)
    }

    function u(e, t, n, o, i, u, a) {
        return r(t ^ n ^ o, e, t, i, u, a)
    }

    function a(e, t, n, o, i, u, a) {
        return r(n ^ (t | ~o), e, t, i, u, a)
    }

    function s(e, n) {
        e[n >> 5] |= 128 << n % 32,
            e[(n + 64 >>> 9 << 4) + 14] = n;
        var r, s, c, l, f, p = 1732584193, d = -271733879, h = -1732584194, m = 271733878;
        for (r = 0; r < e.length; r += 16)
            s = p,
                c = d,
                l = h,
                f = m,
                p = o(p, d, h, m, e[r], 7, -680876936),
                m = o(m, p, d, h, e[r + 1], 12, -389564586),
                h = o(h, m, p, d, e[r + 2], 17, 606105819),
                d = o(d, h, m, p, e[r + 3], 22, -1044525330),
                p = o(p, d, h, m, e[r + 4], 7, -176418897),
                m = o(m, p, d, h, e[r + 5], 12, 1200080426),
                h = o(h, m, p, d, e[r + 6], 17, -1473231341),
                d = o(d, h, m, p, e[r + 7], 22, -45705983),
                p = o(p, d, h, m, e[r + 8], 7, 1770035416),
                m = o(m, p, d, h, e[r + 9], 12, -1958414417),
                h = o(h, m, p, d, e[r + 10], 17, -42063),
                d = o(d, h, m, p, e[r + 11], 22, -1990404162),
                p = o(p, d, h, m, e[r + 12], 7, 1804603682),
                m = o(m, p, d, h, e[r + 13], 12, -40341101),
                h = o(h, m, p, d, e[r + 14], 17, -1502002290),
                d = o(d, h, m, p, e[r + 15], 22, 1236535329),
                p = i(p, d, h, m, e[r + 1], 5, -165796510),
                m = i(m, p, d, h, e[r + 6], 9, -1069501632),
                h = i(h, m, p, d, e[r + 11], 14, 643717713),
                d = i(d, h, m, p, e[r], 20, -373897302),
                p = i(p, d, h, m, e[r + 5], 5, -701558691),
                m = i(m, p, d, h, e[r + 10], 9, 38016083),
                h = i(h, m, p, d, e[r + 15], 14, -660478335),
                d = i(d, h, m, p, e[r + 4], 20, -405537848),
                p = i(p, d, h, m, e[r + 9], 5, 568446438),
                m = i(m, p, d, h, e[r + 14], 9, -1019803690),
                h = i(h, m, p, d, e[r + 3], 14, -187363961),
                d = i(d, h, m, p, e[r + 8], 20, 1163531501),
                p = i(p, d, h, m, e[r + 13], 5, -1444681467),
                m = i(m, p, d, h, e[r + 2], 9, -51403784),
                h = i(h, m, p, d, e[r + 7], 14, 1735328473),
                d = i(d, h, m, p, e[r + 12], 20, -1926607734),
                p = u(p, d, h, m, e[r + 5], 4, -378558),
                m = u(m, p, d, h, e[r + 8], 11, -2022574463),
                h = u(h, m, p, d, e[r + 11], 16, 1839030562),
                d = u(d, h, m, p, e[r + 14], 23, -35309556),
                p = u(p, d, h, m, e[r + 1], 4, -1530992060),
                m = u(m, p, d, h, e[r + 4], 11, 1272893353),
                h = u(h, m, p, d, e[r + 7], 16, -155497632),
                d = u(d, h, m, p, e[r + 10], 23, -1094730640),
                p = u(p, d, h, m, e[r + 13], 4, 681279174),
                m = u(m, p, d, h, e[r], 11, -358537222),
                h = u(h, m, p, d, e[r + 3], 16, -722521979),
                d = u(d, h, m, p, e[r + 6], 23, 76029189),
                p = u(p, d, h, m, e[r + 9], 4, -640364487),
                m = u(m, p, d, h, e[r + 12], 11, -421815835),
                h = u(h, m, p, d, e[r + 15], 16, 530742520),
                d = u(d, h, m, p, e[r + 2], 23, -995338651),
                p = a(p, d, h, m, e[r], 6, -198630844),
                m = a(m, p, d, h, e[r + 7], 10, 1126891415),
                h = a(h, m, p, d, e[r + 14], 15, -1416354905),
                d = a(d, h, m, p, e[r + 5], 21, -57434055),
                p = a(p, d, h, m, e[r + 12], 6, 1700485571),
                m = a(m, p, d, h, e[r + 3], 10, -1894986606),
                h = a(h, m, p, d, e[r + 10], 15, -1051523),
                d = a(d, h, m, p, e[r + 1], 21, -2054922799),
                p = a(p, d, h, m, e[r + 8], 6, 1873313359),
                m = a(m, p, d, h, e[r + 15], 10, -30611744),
                h = a(h, m, p, d, e[r + 6], 15, -1560198380),
                d = a(d, h, m, p, e[r + 13], 21, 1309151649),
                p = a(p, d, h, m, e[r + 4], 6, -145523070),
                m = a(m, p, d, h, e[r + 11], 10, -1120210379),
                h = a(h, m, p, d, e[r + 2], 15, 718787259),
                d = a(d, h, m, p, e[r + 9], 21, -343485551),
                p = t(p, s),
                d = t(d, c),
                h = t(h, l),
                m = t(m, f);
        return [p, d, h, m]
    }

    function c(e) {
        var t, n = "";
        for (t = 0; t < 32 * e.length; t += 8)
            n += String.fromCharCode(e[t >> 5] >>> t % 32 & 255);
        return n
    }

    function l(e) {
        var t, n = [];
        for (n[(e.length >> 2) - 1] = void 0,
                 t = 0; t < n.length; t += 1)
            n[t] = 0;
        for (t = 0; t < 8 * e.length; t += 8)
            n[t >> 5] |= (255 & e.charCodeAt(t / 8)) << t % 32;
        return n
    }

    function f(e) {
        return c(s(l(e), 8 * e.length))
    }

    function p(e, t) {
        var n, r, o = l(e), i = [], u = [];
        for (i[15] = u[15] = void 0,
             o.length > 16 && (o = s(o, 8 * e.length)),
                 n = 0; 16 > n; n += 1)
            i[n] = 909522486 ^ o[n],
                u[n] = 1549556828 ^ o[n];
        return r = s(i.concat(l(t)), 512 + 8 * t.length),
            c(s(u.concat(r), 640))
    }

    function d(e) {
        var t, n, r = "0123456789abcdef", o = "";
        for (n = 0; n < e.length; n += 1)
            t = e.charCodeAt(n),
                o += r.charAt(t >>> 4 & 15) + r.charAt(15 & t);
        return o
    }

    function h(e) {
        return unescape(encodeURIComponent(e))
    }

    function m(e) {
        return f(h(e))
    }

    function g(e) {
        return d(m(e))
    }

    function v(e, t) {
        return p(h(e), h(t))
    }

    function y(e, t) {
        return d(v(e, t))
    }

    function b(e, t, n) {
        return t ? n ? v(t, e) : y(t, e) : n ? m(e) : g(e)
    }
    return b(e)

};


var as_and_cp = function() {
    var e = Math.floor((new Date).getTime() / 1e3)
        , i = e.toString(16).toUpperCase()
        , t = md5(e).toString().toUpperCase();
    if (8 != i.length)
        return {
            as: "479BB4B7254C150",
            cp: "7E0AC8874BB0985"
        };
    for (var o = t.slice(0, 5), n = t.slice(-5), a = "", s = 0; 5 > s; s++)
        a += o[s] + i[s];
    for (var r = "", c = 0; 5 > c; c++)
        r += i[c + 3] + n[c];
    return {
        as: "A1" + a + i.slice(-3),
        cp: i.slice(0, 3) + r + "E1"
    }
};

//console.log(as_and_cp());

TAC = function() {
    function e(e, a, b, d, c, r) {
        null == r && (r = this);
        var n, i, o = {}, l = o.d = c ? c.d + 1 : 0;
        for (o["$" + l] = o,
                 i = 0; i < l; i++)
            o[n = "$" + i] = c[n];
        for (i = 0,
                 l = o.length = d.length; i < l; i++)
            o[i] = d[i];
        return f(e, a, b, o, r)[1]
    }
    function f(r, o, l, t, v, y) {
        function h(e) {
            S[++A] = e
        }
        function k() {
            return S[A--]
        }
        function m(e, f) {
            for (var a = b, d = "", c = 0; c < e.length; c++) {
                var r = e.charCodeAt(c);
                d += String.fromCharCode(a ^ r),
                    a = (a << 1) + c + f + 1 + (a >> 1) & 255
            }
            return d
        }
        null == v && (v = this);
        var g, C, x, I, S = [], A = 0;
        y && (g = y);
        for (var w = o + 2 * l; o < w; ) {
            var z = 13 * i(r, o) % 241;
            if (o += 2,
            0 == (3 & z))
                if (0 == (3 & (z >>= 2))) {
                    if (0 == (z >>= 2))
                        return [1, S[A--]];
                    if (2 == z)
                        oprand = n(r, o),
                            o += 2 * oprand[0],
                            I = oprand[1],
                            S[++A] = +I;
                    else if (4 == z)
                        g = S[A--],
                            S[A] = S[A] * g;
                    else if (6 == z)
                        g = S[A--],
                            S[A] = S[A] != g;
                    else if (13 == z)
                        C = S[A--],
                            x = S[A--],
                            (I = S[A--]).x === f ? S[++A] = e(r, I.pc, I.len, C, I.z, x) : S[++A] = I.apply(x, C);
                    else {
                        if (15 != z)
                            break;
                        oprand = n(r, o),
                            I = oprand[1],
                            S[A] = function(a, b) {
                                var d = function f() {
                                    var a = arguments;
                                    return e(r, f.pc, f.len, a, f.z, this)
                                };
                                return d.pc = a,
                                    d.len = b,
                                    d.x = f,
                                    d.z = t,
                                    d
                            }(o + 6, I - 4),
                            o += 2 * I - 2
                    }
                } else if (1 == (3 & z))
                    if (3 == (z >>= 2))
                        g = S[--A],
                            S[A] = g(S[A + 1]);
                    else if (5 == z)
                        S[A -= 1] = S[A][S[A + 1]];
                    else if (7 == z)
                        S[A] = --S[A];
                    else {
                        if (9 != z)
                            break;
                        g = S[A--],
                            S[A] = typeof g
                    }
                else if (2 == (3 & z))
                    if (6 == (z >>= 2))
                        S[A] = u(S[A]);
                    else if (8 == z)
                        g = S[A--],
                            oprand = n(r, o),
                            o += 2 * oprand[0],
                            S[A--][m(a[oprand[1]], oprand[1])] = g;
                    else {
                        if (10 != z) {
                            if (12 == z)
                                throw S[A--];
                            break
                        }
                        S[A] = ~S[A]
                    }
                else if (0 == (z >>= 2))
                    S[++A] = null;
                else if (2 == z)
                    g = S[A--],
                        S[A] = S[A] >= g;
                else if (9 == z)
                    g = k(),
                        C = k(),
                        t[0] = 65599 * t[0] + t[g].charCodeAt(C) >>> 0;
                else if (11 == z)
                    S[++A] = void 0;
                else {
                    if (13 != z)
                        break;
                    g = S[A--],
                        S[A] = S[A] && g
                }
            else if (1 == (3 & z))
                if (0 == (3 & (z >>= 2))) {
                    if (4 == (z >>= 2)) {
                        oprand = n(r, o),
                            I = oprand[1];
                        try {
                            if (d[c][2] = 1,
                            1 == (g = f(r, o + 6, I - 4, t, v))[0])
                                return g
                        } catch (y) {
                            if (d[c] && d[c][1] && 1 == (g = f(r, d[c][1][0], d[c][1][1], t, v, y))[0])
                                return g
                        } finally {
                            if (d[c] && d[c][0] && 1 == (g = f(r, d[c][0][0], d[c][0][1], t, v))[0])
                                return g;
                            d[c] = 0,
                                c--
                        }
                        o += 2 * I - 2
                    } else if (6 == z)
                        oprand = n(r, o),
                            o += 2 * oprand[0],
                            I = oprand[1],
                            S[A -= I] = p("x,y", "return new x[y](" + Array(I + 1).join(",x[++y]").substr(1) + ")")(S, A);
                    else if (8 == z)
                        g = S[A--],
                            S[A] = S[A] & g;
                    else if (10 != z)
                        break
                } else if (1 == (3 & z))
                    if (0 == (z >>= 2))
                        S[A] = !S[A];
                    else if (7 == z)
                        C = S[A--],
                            g = delete S[A--][C];
                    else if (9 == z)
                        oprand = n(r, o),
                            o += 2 * oprand[0],
                            S[A] = S[A][m(a[oprand[1]], oprand[1])];
                    else {
                        if (11 != z)
                            break;
                        g = S[A--],
                            S[A] = S[A] << g
                    }
                else if (2 == (3 & z))
                    if (1 == (z >>= 2))
                        S[++A] = g;
                    else if (3 == z)
                        g = S[A--],
                            S[A] = S[A] <= g;
                    else if (10 == z)
                        g = S[A -= 2][S[A + 1]] = S[A + 2],
                            A--;
                    else if (12 == z)
                        g = S[A],
                            S[++A] = g;
                    else {
                        if (14 != z)
                            break;
                        g = S[A--],
                            S[A] = S[A] || g
                    }
                else if (0 == (z >>= 2))
                    S[A] = !S[A];
                else if (2 == z)
                    oprand = n(r, o),
                        o += 2 * (I = oprand[1]) - 2;
                else if (4 == z)
                    g = S[A--],
                        S[A] = S[A] / g;
                else if (6 == z)
                    g = S[A--],
                        S[A] = S[A] !== g;
                else {
                    if (13 != z)
                        break;
                    S[++A] = v
                }
            else if (2 == (3 & z))
                if (0 == (3 & (z >>= 2)))
                    if (1 == (z >>= 2))
                        g = S[A--],
                            S[A] = S[A] > g;
                    else if (8 == z)
                        oprand = n(r, o),
                            o += 2 * oprand[0],
                            I = oprand[1],
                            C = A + 1,
                            S[A -= I - 1] = I ? S.slice(A, C) : [];
                    else if (10 == z)
                        oprand = n(r, o),
                            o += 2 * oprand[0],
                            I = oprand[1],
                            g = S[A--],
                            t[I] = g;
                    else {
                        if (12 != z)
                            break;
                        g = S[A--],
                            S[A] = S[A] >> g
                    }
                else if (1 == (3 & z))
                    if (0 == (z >>= 2))
                        S[++A] = s;
                    else if (2 == z)
                        g = S[A--],
                            S[A] = S[A] + g;
                    else if (4 == z)
                        g = S[A--],
                            S[A] = S[A] == g;
                    else if (11 == z)
                        oprand = n(r, o),
                            o += 2 * oprand[0],
                            I = oprand[1],
                            S[--A] = p("x,y", "return x " + m(a[I], I) + " y")(S[A], S[A + 1]);
                    else {
                        if (13 != z)
                            break;
                        g = S[A - 1],
                            C = S[A],
                            S[++A] = g,
                            S[++A] = C
                    }
                else if (2 == (3 & z))
                    if (1 == (z >>= 2))
                        oprand = n(r, o),
                            o += 2 * oprand[0],
                            S[++A] = m(a[oprand[1]], oprand[1]);
                    else if (3 == z)
                        S[A--] ? o += 6 : (oprand = n(r, o),
                            o += 2 * (I = oprand[1]) - 2);
                    else if (5 == z)
                        g = S[A--],
                            S[A] = S[A] % g;
                    else if (7 == z)
                        g = S[A--],
                            S[A] = S[A]instanceof g;
                    else {
                        if (14 != z)
                            break;
                        S[++A] = !1
                    }
                else if (4 == (z >>= 2))
                    oprand = n(r, o),
                        I = oprand[1],
                        d[c][0] && !d[c][2] ? d[c][1] = [o + 6, I - 4] : d[c++] = [0, [o + 6, I - 4], 0],
                        o += 2 * I - 2;
                else if (6 == z)
                    oprand = n(r, o),
                        o += 2 * oprand[0],
                        I = oprand[1],
                        S[++A] = t["$" + I];
                else {
                    if (8 != z)
                        break;
                    g = S[A--],
                        S[A] = S[A] | g
                }
            else if (0 == (3 & (z >>= 2)))
                if (1 == (z >>= 2))
                    oprand = n(r, o),
                        o += 2 * oprand[0],
                        I = oprand[1],
                        S[++A] = +m(a[I], I);
                else if (3 == z)
                    g = S[A--],
                        S[A] = S[A] - g;
                else if (5 == z)
                    g = S[A--],
                        S[A] = S[A] === g;
                else if (12 == z)
                    C = S[A--],
                        x = S[A--],
                        (I = S[A--]).x === f ? S[++A] = e(r, I.pc, I.len, C, I.z, x) : S[++A] = I.apply(x, C);
                else {
                    if (14 != z)
                        break;
                    g = S[A],
                        S[A] = S[A - 1],
                        S[A - 1] = g
                }
            else if (1 == (3 & z))
                if (2 == (z >>= 2))
                    h(function(e) {
                        var f = 0
                            , a = e.length;
                        return function() {
                            var b = f < a;
                            b && h(e[f++]),
                                h(b)
                        }
                    }(S[A]));
                else if (4 == z)
                    oprand = n(r, o),
                        o += 2 * oprand[0],
                        I = oprand[1],
                        g = t[I],
                        S[++A] = g;
                else if (6 == z)
                    S[A] = ++S[A];
                else {
                    if (8 != z)
                        break;
                    g = S[A--],
                        S[A] = S[A]in g
                }
            else if (2 == (3 & z))
                if (5 == (z >>= 2))
                    ;
                else if (7 == z)
                    g = S[A--];
                else if (9 == z)
                    g = S[A--],
                        S[A] = S[A] ^ g;
                else {
                    if (11 != z)
                        break;
                    oprand = n(r, o),
                        I = oprand[1],
                        d[++c] = [[o + 6, I - 4], 0, 0],
                        o += 2 * I - 2
                }
            else if (1 == (z >>= 2))
                g = S[A--],
                    S[A] = S[A] < g;
            else if (8 == z)
                oprand = n(r, o),
                    o += 2 * oprand[0],
                    I = oprand[1],
                    S[A] = S[A][I];
            else if (10 == z)
                S[++A] = !0;
            else {
                if (12 != z)
                    break;
                g = S[A--],
                    S[A] = S[A] >>> g
            }
        }
        return [0, null]
    }
    var a = []
        , b = 0
        , d = []
        , c = 0
        , r = function(e, f) {
            var a = "" + e[f++] + e[f];
            return parseInt(a, 16)
        }
        , n = function(e, f) {
            var a = e[f++]
                , b = e[f]
                , d = parseInt("" + a + b, 16);
            if (d >> 7 == 0)
                return d >> 6 != 0 && (d = -64 | 63 & d),
                    [1, d];
            if (d >> 6 == 2) {
                var c = parseInt("" + e[++f] + e[++f], 16);
                return 0 != (32 & d) ? d = -32 | 31 & d : d &= 31,
                    d <<= 8,
                    c = d + c,
                    [2, c]
            }
            if (d >> 6 == 3) {
                var r = parseInt("" + e[++f] + e[++f], 16)
                    , n = parseInt("" + e[++f] + e[++f], 16);
                return 0 != (32 & d) ? d = -32 | 31 & d : d &= 31,
                    d <<= 16,
                    r <<= 8,
                    n = d + r + n,
                    [3, n]
            }
        }
        , i = function(e, f) {
            var a = e[f++]
                , b = e[f];
            return parseInt("" + a + b, 16)
        }
        , o = function(e, f) {
            var a = "" + e[f++] + e[f];
            return a = parseInt(a, 16),
                String.fromCharCode(a)
        }
        , l = function(e, f, a) {
            for (var b = "", d = 0; d < a; d++)
                b += o(e, f),
                    f += 2;
            return b
        }
        , t = function(e, f, b) {
            for (var d = 0; d < b; d++) {
                var c = n(e, f);
                f += 2 * c[0];
                var r = l(e, f, c[1]);
                a.push(r),
                    f += 2 * c[1]
            }
        }
        , s = this
        , p = s.Function
        , u = Object.keys || function(e) {
            var f = {}
                , a = 0;
            for (var b in e)
                f[a++] = b;
            return f.length = a,
                f
        }
    ;
    return function(f) {
        f.length;
        for (var d = 0, c = "", i = d; i < d + 16; )
            c += o(f, i),
                i += 2;
        if ("HNOJ@?RC" != c)
            throw new Error("error magic number " + c);
        n(f, d += 16);
        d += 8,
            b = 0;
        for (var l = 0; l < 4; l++) {
            var s = r(f, d + 2 * l);
            b += (3 & s) << 2 * l
        }
        d += 16;
        var p = n(f, d += 16)
            , u = p[1]
            , v = d += 2 * p[0];
        d += p[1];
        var y = n(f, d);
        y[1];
        d += 2 * y[0],
            a = [],
            t(f, d, y[1]),
            e(f, v, u, [])
    }
}(),
    TAC("", []);

// let url = "https://www.toutiao.com/toutiao/c/user/article/?page_type=1&user_id=4377795668&max_behot_time=0&count=20&as="+as+"&cp="+cp;

function get_url (urls){
    try{
        if (urls.indexOf("&as=") > 0 || urls.indexOf("&cp=") > 0){
            let url = urls;
            let o = {url: url};
            let toutiao_signature_cp_as = window.byted_acrawler.sign(o);
            // console.log(url+ "&_signature=" +toutiao_signature_cp_as);
            return url+ "&_signature=" +toutiao_signature_cp_as;
        }else{
            var as_cp = as_and_cp()
            let as = as_cp.as;
            let cp = as_cp.cp;
            let url = urls +"&as=" +as+"&cp="+cp;
            let o = {url: url};
            let toutiao_signature_cp_as = window.byted_acrawler.sign(o);
            // console.log(url+ "&_signature=" +toutiao_signature_cp_as);
            return url+ "&_signature=" +toutiao_signature_cp_as;
            }
    }
    catch(e){
        // console.log("err");
        return "err";
    }
   
}

exports.getUrl = get_url;
